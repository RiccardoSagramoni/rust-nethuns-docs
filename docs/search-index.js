var searchIndex = JSON.parse('{\
"nethuns":{"doc":"","t":"AAAAFFDDIDLLLLLLLLLLALLLLLLLLLLLLLLLKKKLALLLLKLLLLKKKLLLLLLLLKKKKKKLLLLLLNNNNNNNNNNNNNNNNNNNNNNNEEEEEEEEEENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNEEGEEDDNNNNNNNLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLMMMLLLLMMLLLLLLLLLLLLLLLLLLLLMLLLLLLMMMFFFFFFF","n":["misc","sockets","types","vlan","nethuns_dev_queue_name","nethuns_device_name","BindableNethunsSocket","NethunsSocket","PkthdrTrait","RecvPacket","bind","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","drop","dump_rings","errors","fanout","fd","flush","fmt","fmt","fmt","fmt","from","from","from","get_packet_buffer_ref","id","into","into","into","len","offvlan_tci","offvlan_tpid","open","pcap","pkthdr","recv","rx","rx","rxhash","rxring_get_size","send","send_slot","set_filter","set_len","set_snaplen","snaplen","stats","to_string","try_from","try_from","try_from","try_into","try_into","try_into","tstamp_nsec","tstamp_sec","tstamp_set_nsec","tstamp_set_sec","tstamp_set_usec","tstamp_usec","tx","tx","txring_get_size","type_id","type_id","type_id","Eof","Error","Error","Error","Error","Error","FailedTransmission","FileError","FileError","FileError","FileError","FileError","FrameworkError","FrameworkError","FrameworkError","IllegalArgument","InUse","InUse","InUse","InUse","InvalidOptions","InvalidPacketSize","MagicNotSupported","NethunsBindError","NethunsFlushError","NethunsOpenError","NethunsPcapOpenError","NethunsPcapReadError","NethunsPcapRewindError","NethunsPcapStoreError","NethunsPcapWriteError","NethunsRecvError","NethunsSendError","NoPacketsAvailable","NotRx","NotSupported","NotSupported","NotSupported","NotTx","NotTx","PacketFiltered","PcapError","PcapError","WriteModeNotSupported","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","source","source","source","source","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","NethunsSocketPcap","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caplen","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","fmt","fmt","fmt","fmt","from","from","from","from","hdr","index","into","into","into","into","len","nethuns_pcap_patched_pkthdr","nethuns_pcap_pkthdr","nethuns_pcap_timeval","open","pkt_type","protocol","read","rewind","store","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ts","tv_sec","tv_usec","type_id","type_id","type_id","type_id","write","Any","Default","DrvMode","In","InOut","NethunsCaptureDir","NethunsCaptureMode","NethunsFilter","NethunsQueue","NethunsSocketMode","NethunsSocketOptions","NethunsStat","Out","RxOnly","RxTx","SkbMode","Some","TxOnly","ZeroCopy","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capture","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","dir","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","into","into","into","into","into","into","mode","numblocks","numpackets","packetsize","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pin_dir","promisc","reuse_maps","rx_dropped","rx_if_dropped","rx_invalid","rx_packets","rxhash","timeout_ms","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx_invalid","tx_packets","tx_qdisc_bypass","type_id","type_id","type_id","type_id","type_id","type_id","xdp_prog","xdp_prog_sec","xsk_map_name","nethuns_vlan_dei","nethuns_vlan_pcp","nethuns_vlan_tci","nethuns_vlan_tci_","nethuns_vlan_tpid","nethuns_vlan_tpid_","nethuns_vlan_vid"],"q":[[0,"nethuns"],[4,"nethuns::misc"],[6,"nethuns::sockets"],[73,"nethuns::sockets::errors"],[228,"nethuns::sockets::pcap"],[290,"nethuns::types"],[427,"nethuns::vlan"]],"d":["Miscellaneous and utility functions.","Nethuns sockets","Utility structs and enums for the nethuns library.","VLAN-specific functions","Get full device name, taking into account both the real …","Get the name of the device bounded to the socket.","Descriptor of a Nethuns socket not binded to a specific …","Descriptor of a Nethuns socket after binding.","Trait for the <code>Pkthdr</code> struct, which contains the packet …","Public data structure for a packet received when calling …","Bind an opened socket to a specific queue / any queue of …","","","","","","","","Release the buffer by resetting the status flag of the …","Dump the rings of the socket.","Enums representing the possible errors returned during …","Join a fanout group.","Get the file descriptor of the socket.","Send all queued up packets.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to the buffer inside a specific …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Open a new Nethuns socket, by calling the <code>open</code> function of …","Nethuns socket for packet capture (PCAP).","","Get the next unprocessed received packet.","Check if the socket is in RX mode","Check if the socket is in RX mode","","Get size of the RX ring.","Queue up a packet for transmission.","Mark the packet contained in the a specific slot of the TX …","Set the optional packet filtering function.","","","","Get some statistics about the socket or <code>None</code> on error.","","","","","","","","","","","","","","Check if the socket is in TX mode","Check if the socket is in TX mode","Get size of the TX ring.","","","","","","","","","","","","","","","","","","","","","","","","","","","Error type for <code>BindableNethunsSocket::bind</code>","Error type for <code>NethunsSocket::flush</code>","Error type for <code>BindableNethunsSocket::open</code>","Error type for <code>NethunsSocketPcap::open</code>","Error type for <code>NethunsSocketPcap::read</code>","Error type for <code>NethunsSocketPcap::rewind</code>","Error type for <code>NethunsSocketPcap::store</code>","Error type for <code>NethunsSocketPcap::write</code>","Error type for <code>NethunsSocket::recv</code>","Error type for <code>NethunsSocket::send</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nethuns socket for packet capture (PCAP).","","","","","","","","","length of portion present","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","length of this packet (off wire)","Patched pcap packet header for the Kuznetzov’s …","Pcap packet header","Pcap time value","Open the socket for reading captured packets from a file.","","","Read a packet from the socket.","Rewind the reader to the beginning of the pcap file.","Store a packet received from a <code>NethunsSocket</code> into a pcap …","","","","","","","","","","","","timestamp","","","","","","","Write a packet already in pcap format to a pcap file.","","","","","","Enum for specifying the direction for capturing packets.","Enum for specifying the mode for capturing packets.","Closure type for the filtering of received packets. …","Enum for specifying which queue of the device should be …","Enum for specifying the mode (rx/tx) for the nethuns …","Options for the nethuns socket.","Statistics for the nethuns socket.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","xdp only","","xdp only","","","xdp only","","","","","","","","","","","","","","","","","","","","","","xdp only","","","","","","","","","xdp only","xdp only   ","xdp only","Drop eligible indicator","Priority code point","Tag control information","Tag control information for nethuns socket","Tag protocol identifier","Tag protocol identifier for nethuns socket","VLAN identifier"],"i":[0,0,0,0,0,0,0,0,0,0,6,8,6,5,8,6,5,8,8,5,0,5,5,5,8,8,6,5,8,6,5,5,8,8,6,5,23,23,23,6,0,8,5,6,5,23,5,5,5,5,23,23,23,5,8,8,6,5,8,6,5,23,23,23,23,23,23,6,5,5,8,6,5,32,22,30,24,25,15,15,31,32,33,34,35,30,24,15,30,24,25,15,32,22,25,31,0,0,0,0,0,0,0,0,0,0,24,24,33,34,35,25,15,24,31,32,31,22,30,24,25,15,31,32,33,34,35,22,30,24,25,15,31,32,33,34,35,22,22,30,30,24,24,25,25,15,15,31,31,32,32,33,33,34,34,35,35,22,30,24,25,15,31,31,31,32,32,32,33,33,34,34,35,35,22,30,24,25,15,31,32,33,34,35,31,33,34,35,22,30,24,25,15,31,32,33,34,35,22,30,24,25,15,31,32,33,34,35,22,30,24,25,15,31,32,33,34,35,22,30,24,25,15,31,32,33,34,35,0,44,41,42,43,44,41,42,43,41,41,42,43,41,42,43,41,42,43,44,41,42,43,44,41,42,43,42,42,44,41,42,43,41,0,0,0,44,42,42,44,44,44,41,42,43,44,41,42,43,44,41,42,43,41,43,43,44,41,42,43,44,3,50,50,49,49,0,0,0,0,0,0,0,49,51,51,50,3,51,50,3,49,50,51,21,28,3,49,50,51,21,28,21,3,49,50,51,21,28,3,49,50,51,21,28,3,49,50,51,21,28,3,49,50,51,21,28,21,3,49,50,51,21,28,3,49,50,51,21,28,3,49,50,51,21,28,28,3,49,50,51,21,28,3,49,50,51,21,28,21,21,21,21,3,49,50,51,21,28,21,21,21,28,28,28,28,21,21,3,49,50,51,21,28,3,49,50,51,21,28,3,49,50,51,21,28,28,28,21,3,49,50,51,21,28,21,21,21,0,0,0,0,0,0,0],"f":[0,0,0,0,[[[2,[1]],3],4],[5,4],0,0,0,0,[[6,1,3],[[7,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[10,[9]]]],[8],[5],0,[[5,11,12],13],[5,14],[5,[[7,[15]]]],[[8,16],17],[[8,16],17],[[6,16],17],[[5,16],17],[[]],[[]],[[]],[[5,18],[[2,[[10,[9]]]]]],[8,18],[[]],[[]],[[]],[[],19],[[],20],[[],20],[21,[[7,[6,22]]]],0,[8,23],[5,[[7,[8,24]]]],[6,13],[5,13],[[],19],[5,[[2,[18]]]],[[5,[10,[9]]],[[7,[25]]]],[[5,18,18],[[7,[25]]]],[[5,[2,[[27,[26]]]]]],[19],[19],[[],19],[5,[[2,[28]]]],[[],4],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],19],[[],19],[19],[19],[19],[[],19],[6,13],[5,13],[5,[[2,[18]]]],[[],29],[[],29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[22,16],17],[[22,16],17],[[30,16],17],[[30,16],17],[[24,16],17],[[24,16],17],[[25,16],17],[[25,16],17],[[15,16],17],[[15,16],17],[[31,16],17],[[31,16],17],[[32,16],17],[[32,16],17],[[33,16],17],[[33,16],17],[[34,16],17],[[34,16],17],[[35,16],17],[[35,16],17],[[]],[[]],[[]],[[]],[[]],[[[38,[[0,[36,37]]]]],31],[[]],[39,31],[[]],[39,32],[[[38,[[0,[36,37]]]]],32],[39,33],[[]],[[]],[39,34],[[]],[39,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,[[2,[40]]]],[33,[[2,[40]]]],[34,[[2,[40]]]],[35,[[2,[40]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,19],[41,41],[42,42],[43,43],[[]],[[]],[[]],[[],41],[[],42],[[],43],[[44,16],17],[[41,16],17],[[42,16],17],[[43,16],17],[[]],[[]],[[]],[[]],[42,41],[42,11],[[]],[[]],[[]],[[]],[41,19],0,0,0,[[21,1,13],[[7,[44,31]]]],[42,45],[42,46],[44,[[7,[8,32]]]],[44,[[7,[47,35]]]],[[44,23,[10,[9]]],[[7,[19,34]]]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[41,43],[43,48],[43,48],[[],29],[[],29],[[],29],[[],29],[[44,41,[10,[9]]],[[7,[18,33]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,3],[49,49],[50,50],[51,51],[21,21],[28,28],[[]],[[]],[[]],[[]],[[]],[[]],[[3,3],52],[[49,49],52],[[50,50],52],[[51,51],52],[[21,21],52],[[28,28],52],[[],3],[[],49],[[],50],[[],51],[[],21],[[],28],0,[[3,3],13],[[49,49],13],[[50,50],13],[[51,51],13],[[21,21],13],[[28,28],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[3,16],17],[[49,16],17],[[50,16],17],[[51,16],17],[[21,16],17],[[28,16],17],[28,47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[3,3],[[2,[52]]]],[[49,49],[[2,[52]]]],[[50,50],[[2,[52]]]],[[51,51],[[2,[52]]]],[[21,21],[[2,[52]]]],[[28,28],[[2,[52]]]],0,0,0,[28,47],[28,47],[28,47],[28,47],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[28,47],[28,47],0,[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,[20,20],[20,20],[[[10,[9]]],20],[[23,[10,[9]]],20],[[[10,[9]]],20],[[23,[10,[9]]],20],[20,20]],"c":[],"p":[[15,"str"],[4,"Option"],[4,"NethunsQueue"],[3,"String"],[3,"NethunsSocket"],[3,"BindableNethunsSocket"],[4,"Result"],[3,"RecvPacket"],[15,"u8"],[15,"slice"],[15,"i32"],[3,"CStr"],[15,"bool"],[6,"c_int"],[4,"NethunsFlushError"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"u32"],[15,"u16"],[3,"NethunsSocketOptions"],[4,"NethunsOpenError"],[8,"PkthdrTrait"],[4,"NethunsRecvError"],[4,"NethunsSendError"],[6,"NethunsFilter"],[3,"Box"],[3,"NethunsStat"],[3,"TypeId"],[4,"NethunsBindError"],[4,"NethunsPcapOpenError"],[4,"NethunsPcapReadError"],[4,"NethunsPcapWriteError"],[4,"NethunsPcapStoreError"],[4,"NethunsPcapRewindError"],[8,"Debug"],[8,"Sized"],[4,"PcapError"],[3,"Error"],[8,"Error"],[3,"nethuns_pcap_pkthdr"],[3,"nethuns_pcap_patched_pkthdr"],[3,"nethuns_pcap_timeval"],[3,"NethunsSocketPcap"],[6,"c_uchar"],[6,"c_ushort"],[15,"u64"],[15,"i64"],[4,"NethunsCaptureDir"],[4,"NethunsCaptureMode"],[4,"NethunsSocketMode"],[4,"Ordering"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
